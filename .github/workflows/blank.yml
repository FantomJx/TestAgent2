name: Claude Code Review

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

env:
  LINE_THRESHOLD: 200

jobs:
  claude-review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write

    steps:
      - name: Checkout full repo history
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Generate diff between base and head (excluding workflow file)
        id: diff
        run: |
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          git fetch origin "$BASE_SHA" "$HEAD_SHA"

          DIFF=$(git diff "$BASE_SHA" "$HEAD_SHA" -- . ':(exclude).github/**')
          echo "diff_b64=$(printf '%s' "$DIFF" | base64 -w0)" >> "$GITHUB_OUTPUT"

          LINE_COUNT=$(echo "$DIFF" | grep -c '^[+-]' || echo "0")
          echo "line_count=$LINE_COUNT" >> "$GITHUB_OUTPUT"

      - name: Track architecture changes
        id: track-arch
        if: contains(github.event.pull_request.title, '#IMPORTANT-CHANGE') || contains(github.event.pull_request.title, '#IMPORTANT-CHANGES') || contains(toJSON(github.event.pull_request.labels.*.name), 'important change') || contains(toJSON(github.event.pull_request.labels.*.name), 'important changes')
        env:
          DIFF_B64: ${{ steps.diff.outputs.diff_b64 }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          python3 .github/scripts/track_architecture.py >> "$GITHUB_OUTPUT"

      - name: Summarize architecture if needed
        if: (contains(github.event.pull_request.title, '#IMPORTANT-CHANGE') || contains(github.event.pull_request.title, '#IMPORTANT-CHANGES') || contains(toJSON(github.event.pull_request.labels.*.name), 'important change') || contains(toJSON(github.event.pull_request.labels.*.name), 'important changes')) && contains(steps.track-arch.outputs.should_summarize, 'true')
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          SHOULD_SUMMARIZE: 'true'
        run: |
          python3 .github/scripts/summarize_architecture.py

      - name: Commit architecture summary changes
        if: (contains(github.event.pull_request.title, '#IMPORTANT-CHANGE') || contains(github.event.pull_request.title, '#IMPORTANT-CHANGES') || contains(toJSON(github.event.pull_request.labels.*.name), 'important change') || contains(toJSON(github.event.pull_request.labels.*.name), 'important changes')) && (contains(steps.track-arch.outputs.arch_updated, 'true') || contains(steps.track-arch.outputs.should_summarize, 'true'))
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          
          git add . || true
          
          # Check if we can push (test PAT permissions)
          CAN_PUSH=true
          if ! git ls-remote --exit-code origin HEAD >/dev/null 2>&1; then
            echo "Warning: PAT may lack required permissions"
            CAN_PUSH=false
          fi
          
          # Pull latest changes to avoid conflicts
          git fetch origin ${{ github.head_ref }}
          
          # Handle rebase conflicts gracefully
          if ! git pull origin ${{ github.head_ref }} --rebase; then
            echo "Rebase failed, aborting and continuing without changes..."
            git rebase --abort || true
            exit 0
          fi
          
          # Add and commit changes
          git add architecture_summary.txt* || true
          
          # Only commit if there are changes
          if ! git diff --cached --quiet; then
            git commit -m "Update architecture summary [skip ci]" || true
            
            # Only attempt push if PAT permissions seem adequate
            if [ "$CAN_PUSH" = "true" ]; then
              # Try normal push first, then force push if needed
              if ! git push origin HEAD:${{ github.head_ref }}; then
                echo "Normal push failed, trying force push..."
                git push --force-with-lease origin HEAD:${{ github.head_ref }} || {
                  echo "Force push also failed, continuing without push..."
                  exit 0
                }
              fi
            else
              echo "Skipping push due to potential PAT permission issues"
            fi
          else
            echo "No changes to commit"
          fi

      - name: Choose model based on line count and labels
        id: choose-model
        run: |
          THRESHOLD=${{ env.LINE_THRESHOLD }}
          LINES=${{ steps.diff.outputs.line_count }}
          
          # Check if PR has "important change" or "important changes" label
          HAS_IMPORTANT_LABEL=false
          if echo '${{ toJSON(github.event.pull_request.labels.*.name) }}' | grep -q -E "(important change|important changes)"; then
            HAS_IMPORTANT_LABEL=true
            echo "Found 'important change' or 'important changes' label"
          fi
          
          # Set outputs for use in next steps
          echo "has_important_label=$HAS_IMPORTANT_LABEL" >> "$GITHUB_OUTPUT"
          echo "line_threshold=$THRESHOLD" >> "$GITHUB_OUTPUT"
          
          # Model selection logic:
          # 1. If has important label -> use Claude
          # 2. If no label but exceeds threshold -> use Claude
          # 3. Otherwise -> use o3-mini
          if [ "$HAS_IMPORTANT_LABEL" = "true" ]; then
            echo "model=claude-sonnet-4-20250514" >> "$GITHUB_OUTPUT"
            echo "model_comment=This response was generated by Claude 4 Sonnet (important changes label detected)." >> "$GITHUB_OUTPUT"
            echo "Using Claude due to important changes label"
          elif [ "$LINES" -gt "$THRESHOLD" ]; then
            echo "model=claude-sonnet-4-20250514" >> "$GITHUB_OUTPUT"
            echo "model_comment=This response was generated by Claude 4 Sonnet (large diff detected)." >> "$GITHUB_OUTPUT"
            echo "Using Claude due to large diff ($LINES lines > $THRESHOLD threshold)"
          else
            echo "model=o3-mini" >> "$GITHUB_OUTPUT"
            echo "model_comment=This response was generated by GPT o3 mini." >> "$GITHUB_OUTPUT"
            echo "Using o3-mini for small diff ($LINES lines <= $THRESHOLD threshold)"
          fi

      - name: Call AI for code review
        id: ai-review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DIFF_B64: ${{ steps.diff.outputs.diff_b64 }}
          MODEL: ${{ steps.choose-model.outputs.model }}
          HAS_IMPORTANT_LABEL: ${{ steps.choose-model.outputs.has_important_label }}
          LINE_THRESHOLD: ${{ steps.choose-model.outputs.line_threshold }}
        run: |
          python3 .github/scripts/ai_review.py >> "$GITHUB_OUTPUT"

      - name: Post line-by-line comments on PR
        env:
          REVIEW_TEXT: ${{ steps.ai-review.outputs.review_b64 }}
          MODEL_COMMENT: ${{ steps.ai-review.outputs.model_comment || steps.choose-model.outputs.model_comment }}
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          python3 .github/scripts/post_comments.py

      - name: Upload AI response as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ai-response-output
          path: |
            /tmp/ai_response.txt
            /tmp/line_comment.json
            /tmp/summary_comment.json
            architecture_summary.txt*
          retention-days: 7
