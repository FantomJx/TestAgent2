name: Claude Code Review

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  workflow_dispatch:


jobs:
  claude-review:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    permissions:
      pull-requests: write
      contents: read
    
    # Skip if PR is from a fork to avoid secrets exposure or if it's a draft
    if: github.event.pull_request.head.repo.full_name == github.repository && github.event.pull_request.draft == false

    steps:
      - name: Checkout full repo history
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Set up Python and install dependencies
        run: |
          python3 -m pip install --upgrade pip > /dev/null 2>&1
          pip install firebase-admin anthropic openai > /dev/null 2>&1

      - name: Initialize AI cost tracking
        run: |
          cd .github/scripts && python3 -c "from cost_tracker import initialize_cost_tracking; initialize_cost_tracking()"

      # Uncomment below to test cost tracking functionality
      # - name: Test cost tracking (optional)
      #   run: |
      #     python3 .github/scripts/test_cost_tracking.py

      - name: Fetch configuration macros from Firebase
        id: fetch-macros
        continue-on-error: true
        run: |
          python3 .github/scripts/fetch_macros.py

      - name: Parse macros from PR description
        id: parse-pr-macros
        continue-on-error: true
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          python3 .github/scripts/parse_pr_macros.py

      - name: Resolve final macro configuration
        id: resolve-macros
        run: |
          # Priority: PR description > Firebase > defaults
          
          # LINE_THRESHOLD
          if [ -n "${{ steps.parse-pr-macros.outputs.pr_line_threshold }}" ]; then
            LINE_THRESHOLD="${{ steps.parse-pr-macros.outputs.pr_line_threshold }}"
          elif [ -n "${{ steps.fetch-macros.outputs.line_threshold }}" ]; then
            LINE_THRESHOLD="${{ steps.fetch-macros.outputs.line_threshold }}"
          else
            LINE_THRESHOLD="200"
          fi
          
          # CHANGES_THRESHOLD
          if [ -n "${{ steps.parse-pr-macros.outputs.pr_changes_threshold }}" ]; then
            CHANGES_THRESHOLD="${{ steps.parse-pr-macros.outputs.pr_changes_threshold }}"
          elif [ -n "${{ steps.fetch-macros.outputs.changes_threshold }}" ]; then
            CHANGES_THRESHOLD="${{ steps.fetch-macros.outputs.changes_threshold }}"
          else
            CHANGES_THRESHOLD="5"
          fi
          
          # IMPORTANT_CHANGE_MARKERS (only from Firebase or defaults - not configurable in PR)
          if [ -n "${{ steps.fetch-macros.outputs.important_change_markers }}" ]; then
            IMPORTANT_CHANGE_MARKERS="${{ steps.fetch-macros.outputs.important_change_markers }}"
          else
            IMPORTANT_CHANGE_MARKERS="#IMPORTANT-CHANGE,#IMPORTANT-CHANGES"
          fi
          
          # IMPORTANT_CHANGE_LABELS (only from Firebase or defaults - not configurable in PR)
          if [ -n "${{ steps.fetch-macros.outputs.important_change_labels }}" ]; then
            IMPORTANT_CHANGE_LABELS="${{ steps.fetch-macros.outputs.important_change_labels }}"
          else
            IMPORTANT_CHANGE_LABELS="important change,important changes"
          fi
          
          # Set outputs
          echo "line_threshold=$LINE_THRESHOLD" >> "$GITHUB_OUTPUT"
          echo "changes_threshold=$CHANGES_THRESHOLD" >> "$GITHUB_OUTPUT"
          echo "important_change_markers=$IMPORTANT_CHANGE_MARKERS" >> "$GITHUB_OUTPUT"
          echo "important_change_labels=$IMPORTANT_CHANGE_LABELS" >> "$GITHUB_OUTPUT"
          
          # Log the resolved values
          echo "Resolved macro configuration:"
          echo "  LINE_THRESHOLD: $LINE_THRESHOLD"
          echo "  CHANGES_THRESHOLD: $CHANGES_THRESHOLD"
          echo "  IMPORTANT_CHANGE_MARKERS: $IMPORTANT_CHANGE_MARKERS"
          echo "  IMPORTANT_CHANGE_LABELS: $IMPORTANT_CHANGE_LABELS"

      - name: Generate diff between base and head (excluding workflow file)
        id: diff
        run: |
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          git fetch origin "$BASE_SHA" "$HEAD_SHA"

          DIFF=$(git diff "$BASE_SHA" "$HEAD_SHA" -- . ':(exclude).github/**')
          echo "diff_b64=$(printf '%s' "$DIFF" | base64 -w0)" >> "$GITHUB_OUTPUT"

          LINE_COUNT=$(echo "$DIFF" | grep -c '^[+-]' || echo "0")
          echo "line_count=$LINE_COUNT" >> "$GITHUB_OUTPUT"

      - name: Check for important changes
        id: check-important
        run: |
          # Get macro values from resolved macros
          IMPORTANT_CHANGE_MARKERS="${{ steps.resolve-macros.outputs.important_change_markers }}"
          IMPORTANT_CHANGE_LABELS="${{ steps.resolve-macros.outputs.important_change_labels }}"
          
          # Check for important change markers in title
          HAS_IMPORTANT_TITLE=false
          if echo '${{ github.event.pull_request.title }}' | grep -q -E "$(echo "$IMPORTANT_CHANGE_MARKERS" | sed 's/,/|/g')"; then
            HAS_IMPORTANT_TITLE=true
          fi
          
          # Check for important change labels
          HAS_IMPORTANT_LABEL=false
          if echo '${{ toJSON(github.event.pull_request.labels.*.name) }}' | grep -q -E "$(echo "$IMPORTANT_CHANGE_LABELS" | sed 's/,/|/g')"; then
            HAS_IMPORTANT_LABEL=true
          fi
          
          # Check PR description for checkboxes
          PR_BODY='${{ github.event.pull_request.body }}'
          
          # Check for "Do you have important changes?" checkbox marked with X
          HAS_IMPORTANT_CHECKBOX=false
          if echo "$PR_BODY" | grep -q -E '\[X\].*[Dd]o you have important changes'; then
            HAS_IMPORTANT_CHECKBOX=true
          fi
          
          # Check for "Do you want to explicitly use Claude Sonnet 4?" checkbox marked with X
          USE_CLAUDE_CHECKBOX=false
          if echo "$PR_BODY" | grep -q -E '\[X\].*[Dd]o you want to explicitly use Claude Sonnet 4'; then
            USE_CLAUDE_CHECKBOX=true
          fi
          
          # Determine if this is an important change
          IS_IMPORTANT_CHANGE=false
          if [ "$HAS_IMPORTANT_TITLE" = "true" ] || [ "$HAS_IMPORTANT_LABEL" = "true" ] || [ "$HAS_IMPORTANT_CHECKBOX" = "true" ]; then
            IS_IMPORTANT_CHANGE=true
          fi
          
          echo "has_important_title=$HAS_IMPORTANT_TITLE" >> "$GITHUB_OUTPUT"
          echo "has_important_label=$HAS_IMPORTANT_LABEL" >> "$GITHUB_OUTPUT"
          echo "has_important_checkbox=$HAS_IMPORTANT_CHECKBOX" >> "$GITHUB_OUTPUT"
          echo "use_claude_checkbox=$USE_CLAUDE_CHECKBOX" >> "$GITHUB_OUTPUT"
          echo "is_important_change=$IS_IMPORTANT_CHANGE" >> "$GITHUB_OUTPUT"

      - name: Track architecture changes in Firebase
        id: track-arch
        if: steps.check-important.outputs.is_important_change == 'true'
        continue-on-error: true
        env:
          CHANGES_THRESHOLD: ${{ steps.resolve-macros.outputs.changes_threshold }}
          DIFF_B64: ${{ steps.diff.outputs.diff_b64 }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPOSITORY: ${{ github.repository }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        run: |
          python3 .github/scripts/track_architecture.py

      - name: Summarize architecture if needed
        if: steps.check-important.outputs.is_important_change == 'true' && steps.track-arch.outcome == 'success' && contains(steps.track-arch.outputs.should_summarize, 'true')
        continue-on-error: true
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          CHANGES_THRESHOLD: ${{ steps.resolve-macros.outputs.changes_threshold }}
          REPOSITORY: ${{ github.repository }}
          SHOULD_SUMMARIZE: 'true'
          PR_NUMBER: ${{ github.event.pull_request.number }}
          DIFF_B64: ${{ steps.diff.outputs.diff_b64 }}
        run: |
          python3 .github/scripts/summarize_architecture.py
          
      - name: Fetch architecture context from Firebase
        id: fetch-context
        continue-on-error: true
        env:
          CHANGES_THRESHOLD: ${{ steps.resolve-macros.outputs.changes_threshold }}
          REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          python3 .github/scripts/fetch_firebase_context.py

      - name: Choose model based on line count and labels
        id: choose-model
        run: |
          THRESHOLD=${{ steps.resolve-macros.outputs.line_threshold }}
          LINES=${{ steps.diff.outputs.line_count }}
          HAS_IMPORTANT_LABEL=${{ steps.check-important.outputs.has_important_label }}
          HAS_IMPORTANT_TITLE=${{ steps.check-important.outputs.has_important_title }}
          HAS_IMPORTANT_CHECKBOX=${{ steps.check-important.outputs.has_important_checkbox }}
          USE_CLAUDE_CHECKBOX=${{ steps.check-important.outputs.use_claude_checkbox }}
          
          # Set outputs for use in next steps
          echo "has_important_label=$HAS_IMPORTANT_LABEL" >> "$GITHUB_OUTPUT"
          echo "has_important_title=$HAS_IMPORTANT_TITLE" >> "$GITHUB_OUTPUT"
          echo "has_important_checkbox=$HAS_IMPORTANT_CHECKBOX" >> "$GITHUB_OUTPUT"
          echo "use_claude_checkbox=$USE_CLAUDE_CHECKBOX" >> "$GITHUB_OUTPUT"
          echo "line_threshold=$THRESHOLD" >> "$GITHUB_OUTPUT"
          
          # Model selection logic:
          # 1. If explicit Claude checkbox is checked -> use Claude
          # 2. If has important label, title marker, or important checkbox -> use Claude
          # 3. If no label/title/checkbox but exceeds threshold -> use Claude
          # 4. Otherwise -> use gpt-4.1-nano-2025-04-14
          if [ "$USE_CLAUDE_CHECKBOX" = "true" ]; then
            echo "model=claude-sonnet-4-20250514" >> "$GITHUB_OUTPUT"
            echo "model_comment=This response was generated by Claude 4 Sonnet (explicitly requested via checkbox)." >> "$GITHUB_OUTPUT"
            echo "Using Claude due to explicit request (checkbox: $USE_CLAUDE_CHECKBOX)"
          elif [ "$HAS_IMPORTANT_LABEL" = "true" ] || [ "$HAS_IMPORTANT_TITLE" = "true" ] || [ "$HAS_IMPORTANT_CHECKBOX" = "true" ]; then
            echo "model=claude-sonnet-4-20250514" >> "$GITHUB_OUTPUT"
            echo "model_comment=This response was generated by Claude 4 Sonnet (important changes detected)." >> "$GITHUB_OUTPUT"
            echo "Using Claude due to important changes (label: $HAS_IMPORTANT_LABEL, title: $HAS_IMPORTANT_TITLE, checkbox: $HAS_IMPORTANT_CHECKBOX)"
          elif [ "$LINES" -gt "$THRESHOLD" ]; then
            echo "model=claude-sonnet-4-20250514" >> "$GITHUB_OUTPUT"
            echo "model_comment=This response was generated by Claude 4 Sonnet (large diff detected)." >> "$GITHUB_OUTPUT"
            echo "Using Claude due to large diff ($LINES lines > $THRESHOLD threshold)"
          else
            echo "model=gpt-4.1-nano-2025-04-14" >> "$GITHUB_OUTPUT"
            echo "model_comment=This response was generated by gpt 4.1 nano." >> "$GITHUB_OUTPUT"
            echo "Using gpt-4.1-nano-2025-04-14 for small diff ($LINES lines <= $THRESHOLD threshold)"
          fi

      - name: Call AI for code review
        id: ai-review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DIFF_B64: ${{ steps.diff.outputs.diff_b64 }}
          MODEL: ${{ steps.choose-model.outputs.model }}
          HAS_IMPORTANT_LABEL: ${{ steps.choose-model.outputs.has_important_label }}
          LINE_THRESHOLD: ${{ steps.choose-model.outputs.line_threshold }}
          ARCHITECTURE_CONTEXT_B64: ${{ steps.fetch-context.outputs.context_b64 }}
        run: |
          echo "Starting AI review with 2-minute delay to test timeout..."
          sleep 120
          python3 .github/scripts/ai_review.py 2>/tmp/ai_review_debug.log

      - name: Display AI costs so far
        if: always()
        run: |
          echo "=== AI COST CHECKPOINT AFTER REVIEW ==="
          python3 .github/scripts/display_costs.py

      - name: Post line-by-line comments on PR
        env:
          REVIEW_TEXT: ${{ steps.ai-review.outputs.review_b64 }}
          MODEL_COMMENT: ${{ steps.choose-model.outputs.model_comment }}
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          python3 .github/scripts/post_comments.py

      - name: Upload AI response as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ai-response-output
          path: |
            /tmp/ai_response.txt
            /tmp/line_comment.json
            /tmp/summary_comment.json
            /tmp/ai_costs.json
            /tmp/ai_cost_summary.txt
          retention-days: 7

      - name: Finalize AI cost tracking and display summary
        id: cost-summary
        if: always()
        run: |
          echo "=== FINAL AI COST SUMMARY ==="
          cd .github/scripts && python3 -c "from cost_tracker import finalize_cost_tracking; finalize_cost_tracking()"

      - name: Check for timeout and re-run workflow
        if: failure() && runner.os == 'Linux'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          WORKFLOW_ID: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          REF: ${{ github.head_ref }}
        run: |
          # Check if this run failed due to timeout by examining the run details
          echo "Checking if workflow failed due to timeout..."
          
          # Get workflow run details to check conclusion
          RUN_DETAILS=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/runs/$RUN_ID")
          
          CONCLUSION=$(echo "$RUN_DETAILS" | jq -r '.conclusion // empty')
          
          echo "Run conclusion: $CONCLUSION"
          
          # Only re-run if the conclusion indicates a timeout (null conclusion with cancelled status usually indicates timeout)
          # Also check if we're within reasonable time bounds (close to our 5-minute timeout)
          CURRENT_TIME=$(date +%s)
          START_TIME=$(echo "$RUN_DETAILS" | jq -r '.created_at' | xargs -I {} date -d {} +%s)
          ELAPSED=$((CURRENT_TIME - START_TIME))
          
          echo "Elapsed time: ${ELAPSED} seconds"
          
          # If elapsed time is close to our 5-minute (300 second) timeout, treat as timeout
          if [ "$ELAPSED" -ge 280 ] && [ "$ELAPSED" -le 400 ] && [ "$CONCLUSION" != "success" ]; then
            echo "Detected timeout condition. Attempting to re-run workflow..."
            
            # Get the workflow file name
            WORKFLOW_FILE="blank.yml"
            
            # Trigger a new workflow run for the same PR
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/workflows/$WORKFLOW_FILE/dispatches" \
              -d "{\"ref\":\"$REF\"}"
            
            echo "Re-run request sent for workflow: $WORKFLOW_FILE on ref: $REF"
          else
            echo "Not a timeout condition - skipping re-run (elapsed: ${ELAPSED}s, conclusion: $CONCLUSION)"
          fi
