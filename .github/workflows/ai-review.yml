name: AI Code Review

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: number
      pr_author:
        description: 'PR author username'
        required: true
        type: string
      base_sha:
        description: 'Base commit SHA'
        required: true
        type: string
      head_sha:
        description: 'Head commit SHA'
        required: true
        type: string

jobs:
  ai-review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Get PR information
        id: pr_info
        env:
          # For pull_request_target events
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body || '' }}
          PR_DRAFT: ${{ github.event.pull_request.draft }}
          HEAD_REPO: ${{ github.event.pull_request.head.repo.full_name }}
          BASE_REPO: ${{ github.event.pull_request.base.repo.full_name }}
          PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          PR_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          # For workflow_dispatch events
          MANUAL_PR_NUMBER: ${{ github.event.inputs.pr_number }}
          MANUAL_PR_AUTHOR: ${{ github.event.inputs.pr_author }}
          MANUAL_BASE_SHA: ${{ github.event.inputs.base_sha }}
          MANUAL_HEAD_SHA: ${{ github.event.inputs.head_sha }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          python3 -c "
          import os
          import re
          
          # Clean carriage returns and handle multiline content safely
          def clean_output(text):
              if text is None:
                  return ''
              return re.sub(r'\r\n?', '\n', str(text))
          
          def clean_single_line(text):
              if text is None:
                  return ''
              return re.sub(r'[\r\n]', ' ', str(text)).strip()
          
          # Determine event type and get appropriate values
          event_name = os.environ.get('EVENT_NAME', '')
          
          if event_name == 'workflow_dispatch':
              # Manual dispatch - use input values
              pr_number = os.environ.get('MANUAL_PR_NUMBER', '')
              pr_author = os.environ.get('MANUAL_PR_AUTHOR', '')
              pr_base_sha = os.environ.get('MANUAL_BASE_SHA', '')
              pr_head_sha = os.environ.get('MANUAL_HEAD_SHA', '')
              
              # Set minimal values for manual runs
              pr_title = f'Manual Review for PR #{pr_number}'
              pr_body = ''
              pr_draft = 'false'
              head_repo = os.environ.get('HEAD_REPO', '')
              base_repo = os.environ.get('BASE_REPO', '')
              pr_labels = '[]'
              
          else:
              # Pull request event - use event data
              pr_title = clean_single_line(os.environ.get('PR_TITLE', ''))
              pr_body = clean_output(os.environ.get('PR_BODY', ''))
              pr_draft = os.environ.get('PR_DRAFT', 'false')
              head_repo = os.environ.get('HEAD_REPO', '')
              base_repo = os.environ.get('BASE_REPO', '')
              pr_labels = os.environ.get('PR_LABELS', '[]')
              pr_number = os.environ.get('PR_NUMBER', '')
              pr_head_sha = os.environ.get('PR_HEAD_SHA', '')
              pr_base_sha = os.environ.get('PR_BASE_SHA', '')
              pr_author = os.environ.get('PR_AUTHOR', '')
          
          # Write to GitHub output
          github_output = os.environ.get('GITHUB_OUTPUT', '/dev/stdout')
          with open(github_output, 'a') as f:
              f.write(f'pr_title={pr_title}\n')
              f.write('pr_body<<EOF\n')
              f.write(f'{pr_body}\n')
              f.write('EOF\n')
              f.write(f'pr_draft={pr_draft}\n')
              f.write(f'head_repo={head_repo}\n')
              f.write(f'base_repo={base_repo}\n')
              f.write(f'pr_labels={pr_labels}\n')
              f.write(f'pr_number={pr_number}\n')
              f.write(f'pr_head_sha={pr_head_sha}\n')
              f.write(f'pr_base_sha={pr_base_sha}\n')
              f.write(f'pr_author={pr_author}\n')
          "

      - name: Check if should skip review
        id: should_skip
        run: |
          # Skip if PR is from a fork to avoid secrets exposure or if it's a draft
          if [ "${{ steps.pr_info.outputs.head_repo }}" != "${{ steps.pr_info.outputs.base_repo }}" ]; then
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "skip_reason=fork" >> $GITHUB_OUTPUT
            echo "Skipping review: PR is from a fork"
          elif [ "${{ steps.pr_info.outputs.pr_draft }}" = "true" ]; then
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "skip_reason=draft" >> $GITHUB_OUTPUT
            echo "Skipping review: PR is a draft"
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
            echo "Proceeding with review"
          fi

      - name: Checkout full repo history
        if: steps.should_skip.outputs.should_skip == 'false'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Set up Python and install dependencies
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 1
          max_attempts: 2
          retry_on: both
          command: |
            python3 -m pip install --upgrade pip > /dev/null 2>&1
            pip install firebase-admin anthropic > /dev/null 2>&1

      - name: Initialize AI cost tracking
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 1
          max_attempts: 2
          retry_on: both
          command: |
            cd .github/workflows/scripts && python3 -c "from cost_tracker import initialize_cost_tracking; initialize_cost_tracking()"

      - name: Parse custom AI prompt
        id: parse-prompt
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 1
          max_attempts: 2
          retry_on: both
          command: |
            # Parse custom AI prompt from PR description if present
            PR_BODY='${{ steps.pr_info.outputs.pr_body }}'
            CUSTOM_AI_PROMPT=""
            
            # Extract custom prompt from PR template format
            if echo "$PR_BODY" | grep -q "\*\*Additional prompt instructions:\*\*"; then
              # Extract text between ``` blocks after the prompt instructions
              CUSTOM_AI_PROMPT=$(echo "$PR_BODY" | sed -n '/\*\*Additional prompt instructions:\*\*/,/```/{/```/,/```/{/```/d; p}}' | sed '/^$/d' | tr '\n' ' ' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            fi
            
            echo "custom_ai_prompt=$CUSTOM_AI_PROMPT" >> "$GITHUB_OUTPUT"
            
            # Log the custom prompt if present
            if [ -n "$CUSTOM_AI_PROMPT" ]; then
              echo "Custom AI prompt found: $CUSTOM_AI_PROMPT"
            else
              echo "No custom AI prompt specified"
            fi

      - name: Parse macros from PR description
        id: parse-pr-macros
        if: steps.should_skip.outputs.should_skip == 'false'
        continue-on-error: true
        env:
          PR_BODY: ${{ steps.pr_info.outputs.pr_body }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 1
          max_attempts: 2
          retry_on: both
          command: |
            python3 .github/workflows/scripts/parse_pr_macros.py

      - name: Generate diff between base and head (excluding workflow file)
        id: diff
        if: steps.should_skip.outputs.should_skip == 'false'
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 2
          retry_on: both
          retry_wait_seconds: 10
          polling_interval_seconds: 1
          warning_on_retry: true
          continue_on_error: false
          command: |
            # Determine SHA values based on event type
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              # For manual runs, use provided input values
              BASE_SHA="${{ github.event.inputs.base_sha }}"
              HEAD_SHA="${{ github.event.inputs.head_sha }}"
            else
              # For PR events, use event data
              BASE_SHA="${{ steps.pr_info.outputs.pr_base_sha }}"
              HEAD_SHA="${{ steps.pr_info.outputs.pr_head_sha }}"
            fi
            
            # Validate that we have both SHA values
            if [ -z "$BASE_SHA" ] || [ -z "$HEAD_SHA" ]; then
              echo "Error: BASE_SHA or HEAD_SHA is empty"
              echo "BASE_SHA: '$BASE_SHA'"
              echo "HEAD_SHA: '$HEAD_SHA'"
              exit 1
            fi
            
            git fetch origin "$BASE_SHA" "$HEAD_SHA"

            # Generate full diff - smart chunking in AI review will handle large diffs
            # Generate full diff excluding only build artifacts and workflows
            DIFF=$(git diff "$BASE_SHA" "$HEAD_SHA" -- . \
              ':(exclude).github/**' \
              ':(exclude)*.lock' \
              ':(exclude)*.pbxproj' \
              ':(exclude)*.plist' \
              ':(exclude)*.generated.dart' \
              ':(exclude)*.freezed.dart' \
              ':(exclude)*.g.dart' \
              ':(exclude)**/test/**' \
              ':(exclude)android/app/build.gradle' \
              ':(exclude)ios/Podfile.lock' \
              ':(exclude)**/build/**' \
              ':(exclude).dart_tool/**')
            
            if [ -n "$DIFF" ]; then
                # Save diff to file for AI processing
                echo "$DIFF" > /tmp/pr_diff.txt
                
                # Calculate diff stats for logging
                LINE_COUNT=$(echo "$DIFF" | grep -c '^[+-]' || echo "0")
                CHAR_COUNT=$(echo "$DIFF" | wc -c)
                FILE_COUNT=$(echo "$DIFF" | grep -c '^diff --git' || echo "0")
                
                echo "Generated full diff: $FILE_COUNT files, $LINE_COUNT changed lines, $CHAR_COUNT characters"
                
                echo "diff_file_path=/tmp/pr_diff.txt" >> "$GITHUB_OUTPUT"
                echo "line_count=$LINE_COUNT" >> "$GITHUB_OUTPUT"
            else
                echo "No differences found between commits"
                echo "diff_file_path=" >> "$GITHUB_OUTPUT"
                echo "line_count=0" >> "$GITHUB_OUTPUT"
            fi

      - name: Track architecture changes in Firebase
        id: track-arch
        if: steps.should_skip.outputs.should_skip == 'false'
        continue-on-error: true
        env:
          FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          DIFF_FILE_PATH: ${{ steps.diff.outputs.diff_file_path }}
          PR_NUMBER: ${{ steps.pr_info.outputs.pr_number }}
          REPOSITORY: ${{ github.repository }}
          HEAD_SHA: ${{ steps.pr_info.outputs.pr_head_sha }}
          BASE_SHA: ${{ steps.pr_info.outputs.pr_base_sha }}
          PR_TITLE: ${{ steps.pr_info.outputs.pr_title }}
          PR_AUTHOR: ${{ steps.pr_info.outputs.pr_author }}
          PR_DESCRIPTION: ${{ steps.pr_info.outputs.pr_body }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 1
          max_attempts: 2
          retry_on: both
          command: |
            python3 .github/workflows/scripts/track_architecture.py

      - name: Summarize architecture if needed
        if: steps.should_skip.outputs.should_skip == 'false' && steps.track-arch.outcome == 'success' && contains(steps.track-arch.outputs.should_summarize, 'true')
        continue-on-error: true
        env:
          FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

          REPOSITORY: ${{ github.repository }}
          SHOULD_SUMMARIZE: "true"
          PR_NUMBER: ${{ steps.pr_info.outputs.pr_number }}
          DIFF_FILE_PATH: ${{ steps.diff.outputs.diff_file_path }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 8
          max_attempts: 2
          retry_on: both
          command: |
            python3 .github/workflows/scripts/summarize_architecture.py

      - name: Fetch architecture context from Firebase
        id: fetch-context
        if: steps.should_skip.outputs.should_skip == 'false'
        continue-on-error: true
        env:
          FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}

          REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ steps.pr_info.outputs.pr_number }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 1
          max_attempts: 2
          retry_on: both
          command: |
            python3 .github/workflows/scripts/fetch_firebase_context.py

      - name: Choose model based on line count and labels
        id: choose-model
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 1
          max_attempts: 2
          retry_on: both
          command: |
            # Always use Claude model
            echo "Using Claude 4 Sonnet for all code reviews"

            # Always use Claude model
            echo "model=claude-sonnet-4-20250514" >> "$GITHUB_OUTPUT"
            echo "model_comment=This response was generated by Claude 4 Sonnet." >> "$GITHUB_OUTPUT"
            echo "Using Claude 4 Sonnet for code review"
            

      - name: Call AI for code review
        id: ai-review
        if: steps.should_skip.outputs.should_skip == 'false'
        timeout-minutes: 25
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          DIFF_FILE_PATH: ${{ steps.diff.outputs.diff_file_path }}
          MODEL: ${{ steps.choose-model.outputs.model }}
          HAS_IMPORTANT_LABEL: ${{ steps.choose-model.outputs.has_important_label }}

          ARCHITECTURE_CONTEXT_B64: ${{ steps.fetch-context.outputs.context_b64 }}
          CUSTOM_AI_PROMPT: ${{ steps.parse-prompt.outputs.custom_ai_prompt }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 12
          max_attempts: 2
          retry_on: both
          command: |
            python3 .github/workflows/scripts/ai_review.py

      - name: Display AI costs so far
        if: always()
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 1
          max_attempts: 2
          retry_on: both
          command: |
            echo "=== AI COST CHECKPOINT AFTER REVIEW ==="
            python3 .github/workflows/scripts/display_costs.py

      - name: Post truncation notification
        if: false  # Truncation notifications no longer needed with smart chunking
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ steps.pr_info.outputs.pr_number }}
        run: |
          # Post a comment explaining truncation
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments \
            -d '{
              "body": "🔍 **AI Code Review - Large PR Detected**\n\nThis PR contains extensive changes that were automatically truncated for effective review. The AI focused on:\n\n- Core business logic (services, repositories, viewmodels)\n- Domain layer changes\n- Critical architectural components\n\n**Files reviewed:** Top 20 most important files based on architectural significance.\n\n**Excluded:** Generated files, lock files, configuration files, and test files.\n\nFor comprehensive review of all changes, consider breaking large PRs into smaller, focused changes."
            }'

      - name: Post line-by-line comments on PR
        if: steps.should_skip.outputs.should_skip == 'false'
        env:
          REVIEW_TEXT: ${{ steps.ai-review.outputs.review_b64 }}
          MODEL_COMMENT: ${{ steps.choose-model.outputs.model_comment }}
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ steps.pr_info.outputs.pr_number }}
          HEAD_SHA: ${{ steps.pr_info.outputs.pr_head_sha }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 2
          retry_on: both
          command: |
            python3 .github/workflows/scripts/post_comments.py

      - name: Upload AI response as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ai-response-output
          path: |
            /tmp/ai_response.txt
            /tmp/line_comment.json
            /tmp/summary_comment.json
            /tmp/ai_costs.json
            /tmp/ai_cost_summary.txt
          retention-days: 7

      - name: Finalize AI cost tracking and display summary
        id: cost-summary
        if: always()
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 1
          max_attempts: 2
          retry_on: both
          command: |
            echo "=== FINAL AI COST SUMMARY ==="
            cd .github/workflows/scripts && python3 -c "from cost_tracker import finalize_cost_tracking; finalize_cost_tracking()"
